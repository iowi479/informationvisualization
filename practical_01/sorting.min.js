const ALGOS=Object.freeze({SELECTION:0,INSERTION:1,BUBBLE:2}),COMPARE=Object.freeze({MORE:1,EQUAL:0,LESS:-1});function swap(t,e,r){const s=t[e];return t[e]=t[r],t[r]=s,t}function compare(t,e){return t>e?COMPARE.MORE:t<e?COMPARE.LESS:COMPARE.EQUAL}function getValue(t){return t}class Sorter{constructor(t){this.algorithm=t,this.reset()}reset(){switch(this.done=!1,this.iteration=0,this.algorithm){default:case ALGOS.BUBBLE:case ALGOS.SELECTION:this.index=0;break;case ALGOS.INSERTION:this.index=1}}setAlgorithm(t){this.algorithm=t,this.reset()}sortIteration(t,e=getValue){let r;switch(this.algorithm){default:case ALGOS.SELECTION:r=Sorter.selectionSort(t,this.index,Math.min(t.length,this.index+1),e);break;case ALGOS.INSERTION:r=Sorter.insertionSort(t,this.index,Math.min(t.length,this.index+1),e);break;case ALGOS.BUBBLE:r=Sorter.bubbleSort(t,this.index,Math.min(t.length,this.index+1),e)}return this.index++,this.iteration++,r}sort(t,e=getValue){switch(this.reset(),this.algorithm){default:case ALGOS.SELECTION:return Sorter.selectionSort(t,0,t.length,e);case ALGOS.INSERTION:return Sorter.insertionSort(t,1,t.length,e);case ALGOS.BUBBLE:return Sorter.bubbleSort(t,0,t.length,e)}}static selectionSort(t,e,r,s=getValue){let h={changes:[],highlights:[]};for(let i=e;i<r;++i)h=selectionSortIter(t,i,s);return h}static insertionSort(t,e,r,s=getValue){let h={changes:[],highlights:[]};for(let i=e;i<r;++i)h=insertionSortIter(t,i,s);return h}static bubbleSort(t,e,r,s=getValue){let h={changes:[],highlights:[]};for(let i=e;i<r;++i)h=bubbleSortIter(t,i,s);return h}}function selectionSortIter(t,e,r=getValue){const s=t.length,h={changes:[],highlights:[]};let i=e;for(let n=e;n<s;n++)h.highlights.push(n),compare(r(t[i]),r(t[n]))===COMPARE.MORE&&(i=n);return e!==i&&(h.changes.push(e),h.changes.push(i),swap(t,e,i)),h}function insertionSortIter(t,e,r=getValue){const s={changes:[],highlights:[]};let h,i=e;for(h=t[e],s.highlights.push(i);i>0&&compare(r(t[i-1]),r(h))===COMPARE.MORE;)t[i]=t[i-1],s.changes.push(i),s.highlights.push(i-1),i--;return h!==t[i]&&s.changes.push(i),t[i]=h,s}function bubbleSortIter(t,e,r=getValue){const s=t.length,h={changes:[],highlights:[]};for(let i=0;i<s-1-e;i++)h.highlights.push(i),h.highlights.push(i+1),compare(r(t[i]),r(t[i+1]))===COMPARE.MORE&&(swap(t,i,i+1),h.changes.push(i),h.changes.push(i+1));return h}